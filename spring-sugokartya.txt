0. MySQL beállítás :

    0.1 Lóránttól kaptunk egy mysql-8.0.20-winx64 mappát, oda navigáljunk el a konzolon a ../mysql-8.0.20-winx64/bin mappáig. Keressük ki a Windows programok között a 'CMD' keresőszóval a konzolt

    Parancsok:

        [ cd .. ] - egy mappával feljebb lépés
        [ cd mappaneve ] mappa megnyitása
        [ Meghajtó neve: ] arra a meghajtóra ugrás
        [ mysqld --console --port XXXXX ] a port amit megnyitunk és szeretnénk ha a Workbenchen ez a port lenne használva 13306 mostanság

    ! A konzolt ne zárjuk be, mert akkor oda a kapcsolat !

    0.2 MySQL Workbench

        2 db SQL file lesz, amit le kell futtatni. Először egy localhost@root:13306 alatt hozzuk létre a felhasználót, aki majd a táblákat létrehozza. Ha nincs meg ez a csatlakozási pont, akkor:
        + jel
            Connection name: localhost@root:13306
            Port: 13306
            Username: root
            Password: password123 - ha bekonfiguráltuk a Lóránt ini file-ja szerint

        Test connection, ha minden oké, akkor nyissuk meg és másoljuk be az 1. SQL parancsokat, amiket kaptunk Lóránntól. Ha létrejött az új felhasználó, akkor azzal hozzunk létre egy csatlakozási pontot a megadott értékek alapján:
        + jel
            Connection name: localhost@[ megadott név ]:13306
            Port: 13306
            Username: [ megadott név ]
            Password: [ megadott jelszó ]  

        Test connection, ha minden oké, akkor nyissuk meg és másoljuk be az 2. SQL parancsokat, amiket kaptunk Lóránntól. Ha mindenhol zöld pipát kaptunk, jöhet a Spring Boot    

1. Spring Boot pom.xml dependencia súgókártya

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
            </dependency>
            
    <-- Tomcat -->
            <dependency>
                <groupId>org.apache.tomcat.embed</groupId>
                <artifactId>tomcat-embed-jasper</artifactId>
            </dependency>
            
    <-- JSTL -->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
            </dependency>
        
    <-- MySQL connetor -->		
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
            </dependency>	
        
    <-- JPA -->	
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
            </dependency>

2. A package-k, amiket letre kell hozni xx.xxxxx.xx.packageNeve formatumban. Nagy valószínűséggel eu.pontsystems.javatanfolyam.feladatneve lesz a séma:

    eu.pontsystems.javatanfolyam.feladatneve ( ebben van benne a feladatneveApplication, amely a konfigurácónál szükséges lesz majd, ez már készen fogad minket. ! Ügyeljetek arra, hogy ez legyen felül ! )
    eu.pontsystems.javatanfolyam.feladatneve.controller
    eu.pontsystems.javatanfolyam.feladatneve.entity
    eu.pontsystems.javatanfolyam.feladatneve.repository
    eu.pontsystems.javatanfolyam.feladatneve.service

3. Zöld nyilacska ikon MELLETTI lefele mutató fekete nyíl:
    Run configuration >
        Spring Boot App bal oldalt 2x katt rá
            Spring boot fül:
                Lóránt sémája szerint: [feladat neve] sb run
                project legördülőből: feladat neve
                Main type: ezt tudja automatikusan, válasszuk ki
                Enable debug output checkbox pipa
            JRE fül:
                Alternate JRE: jdk-8u251

Eppláj end klóz
                
4. src mappaszerkezet:

    src / main / webapp / WEB-INF / jsp 
jsp-be jönnek majd a fileok, amelyek a HTML kódban íródnak ( jsp-k )

5. application.properties az src / main / resources mappában:
    Ezt másold be, de ügyelj a [] helyekre!

        spring.mvc.view.prefix=/WEB-INF/jsp/
        spring.mvc.view.suffix=.jsp
        server.port=18080
        spring.jpa.hibernate.ddl-auto=update
        spring.datasource.url=jdbc:mysql://localhost:13306/[sql adatbázis neve]?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
        spring.datasource.username=[sql adatbázis szerinti érték]
        spring.datasource.password=[sql adatbázis szerinti érték]
        spring.jpa.database=mysql

6. Az egész MVC modell szerkezete és az egyes elemek feladatai:
	
	eu.pontsystems.javatanfolyam.feladatneve
		Ebben a csomagban van a belépési pontunk. Ezt adjuk meg a konfigurálásnál, ezt a Spring Boot elkészíti nekünk, dolgunk nincs vele.

	eu.pontsystems.javatanfolyam.feladatneve.controller
		Ebebn a csomagban vannak a visszatérési értékei az egyes oldalaknak.
            Először is megkapja a @Controller annotációt a public class ...Controller { felett
            Itt az alábbi annotációkat használtuk:
                @Autowired - összekötjük az egyes osztályokkal, így hozzáférünk azoknak a metódusaihoz, értékeihez. A Controllereket a Service objektumokkal drótoztuk össze ilyen módon:
                    @Autowired
                    private ValamiService [ változónév ]; 

                @GetMapping ( "url/celurl" ) - elnavigál celurl oldalra, ahol végrehajtja az alatta lévő metódust. Egy példa az előző feladatból - szeretnénk kilistázni az elutasított hitelkérelmeket:
                    @GetMapping ( "loan/rejected" ) - megadtuk, hogy a rejected URL-re navigáljon el bennünket
                    public String viewAllRejected(Model model) {            - ez a metódus, amivel kilistázzuk azokat a hitelkérelmeket, amelyek el lettek utasítva. Ennek egyik paramétere egy Model, ami majd magába foglalja a lekérdezett adatokat.
                        model.addAttribute("loans",ls.getAllRejected());    - meghívjuk erre a model paraméterre az addAttribute metódust. Ezt a metódust úgy húztuk elő a kalapból, hogy összekötöttük @Autowireddel a LoanService osztállyal ezt a Controllert, a LoanService-t pedig @Autowireddel összekötöttük a LoanReository-val, ami egy JpaRepository-ból leszármaztatott Interface, így eléri a JpaRepository metódusait, amiben ez az addAttribute () metódus is megtalálható.
                                                                                                        - Az addAttribute metódus paraméterei ( "loans" - ezen a néven fogod meghívni azon az oldalon, ahol szeretnéd hogy megjelenjen. Jelen példában: items="${loans}"
                                                                                                        - második paraméterként meghívjuk rá a ls . getAllRejected () metódust, ami a LoanService objektumban már megírtunk. Etz a metódus egy List típusú változóval tér vissza, amit a Loan entity-ből származtattunk, és rákeres és List-be példányosít minden olyan értéket, amelynek az állapota "REJECTED" )
                        return "loanlistrejected";                                         - ez pedig visszatér azzal a névvel, amire a jsp file-t neveztük el, ahol ezt meg szeretnénk jeleníteni
                    }
                    Összefoglalva: @GetMapping - megadtuk, hogy a megadott url alatt melyik jsp file legyen elérhető. Egy Model-t lérehoztunk, megadtunk neki egy nevet, amivel a jsp fileon belül hivatkozunk, ebbe a Modelbe bepakoltunk egy List-et, amit egy szűrés szerint kaptunk meg. Ez pedig osztályokon át ment a @Autowired annotáció segítségével.

	eu.pontsystems.javatanfolyam.feladatneve.entity
		Egy oylan POJO, amely az adatbázis tábláinak értékeinek a kerete. Mint az eddig tanultak alapján, ezt az objektumot példányosítjuk és az egyes példányait töltjük fel a megfelelő adatokkal, DE most nem egy bufferedreaerrel ovassuk ki az értékeket, hanem az adatbázisból kérjük le ezeket metódusokon át. 
		Vannak paraméterei az adatbázis szerint
		Van egy konstrutora, amivel példányosíthatjuk
		Van egy üres konstruktora, ha csak meg akarjuk hívni és utána setterekkel felparaméterezni
		Vannak getterei
		Vannak setterei
		Illetve Blahut Lóránt, a JAVA (TM) ikonja megfűzerezi az egészet egy toString () { } metódussal, amely visszatér egy String értékkel, kiírva hogy az adott objektum milyen adatokat tartalmaz
 
    eu.pontsystems.javatanfolyam.feladatneve.repository
